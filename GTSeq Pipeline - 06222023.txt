## GT-Seq Genotyping following Nate Cambell's code
https://github.com/GTseq/GTseek_utils
If you have any questions, refer to Nate's GTSeq-Genotyping-Pipeline.txt
The majority of the information is taken from Nate's file with one small exception.  I have had problems with his barcode splitter and have had to do it manually.  I have asked benji to update some of the packages on the server so this make work better but the manual way of demultiplexing is listed below.

Before you begin, you will need to upload all GTSeq files from github onto the UI server in a folder.  Once they are there, you can refer back to the folder when running scripts.

# Example DATA
/mnt/lfs2/staceyn/PYRA1/09-GTSeq/02102022_Run_PYRA_NIDGS_GOBI/PYRA1_02102022.csv
Directory: /mnt/lfs2/staceyn/Consulting_Projects/RAW_Data/SeqMatic/NextSeq_02252022/Undetermined_S0_R1_001.fastq

# 1- Split raw fastq sequence file into individual fastq files using dual index sequences.
NovaSeq runs are reverse compliments.  Must take reverse compliments of i7 barcodes when searching.  
i7 Barcodes Used:
Name			Barcode	Reverse_Compliment	PlateID
#GTseq_018		AGCATA	TATGCT				PYRA2_1
#GTseq_019		CGACTG	CAGTCG				PYRA2_2
#GTseq_020		CCTGAC	GTCAGG				PYRA2_3
#GTseq_021		GGCGAA	TTCGCC				PYRA2_4
#GTseq_012		TACAAG	CTTGTA				PYRA2_5
#GTseq_023		ACTGGA	TCCAGT				PYRA2_6
#GTseq_025		TTCCTG	CAGGAA				PYRA2_8
#GTSeq_001		CGTGAT	ATCACG				NIDGS_WGS
#GTseq_026		AATTTG	CAAATT				EdeerT1
#GTseq_022		CGGCCG	CGGCCG				EdeerP1

Example:
## First use grep to split into plates using the i7 index sequence bases.  Depending on the type of run, you may only SR (only F) or PE reads (F and R). The & command at the end of each line will allow you to run these simultaneously on a standalone server.

grep -A3 '^@A01335.*:TATGCT' GC3F-SN-7777---7165_S0_L001_R1_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2001F.fastq &
grep -A3 '^@A01335.*:CAGTCG' GC3F-SN-7777---7165_S0_L001_R1_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2002F.fastq &
grep -A3 '^@A01335.*:GTCAGG' GC3F-SN-7777---7165_S0_L001_R1_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2003F.fastq &
grep -A3 '^@A01335.*:TTCGCC' GC3F-SN-7777---7165_S0_L001_R1_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2004F.fastq &
grep -A3 '^@A01335.*:TATGCT' GC3F-SN-7777---7165_S0_L001_R2_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2001R.fastq &
grep -A3 '^@A01335.*:CAGTCG' GC3F-SN-7777---7165_S0_L001_R2_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2002R.fastq &
grep -A3 '^@A01335.*:GTCAGG' GC3F-SN-7777---7165_S0_L001_R2_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2003R.fastq &
grep -A3 '^@A01335.*:TTCGCC' GC3F-SN-7777---7165_S0_L001_R2_001.fastq | grep -v '^--$' > ~/PYRA1/09-GTSeq//PYRA_Tissue_06222023/PYRA2004R.fastq 

## If files do not have barcodes in headers, you can use other demultiplexers to sort out your samples or you can assess your barcodes using the following command.

grep ^@NB501656 Undetermined_S0_R1_001.fastq | cut -d":" -f10 | sort -r | uniq -c | sort -nrk1,1 > barcodes.txt

# of reads per file: (cat <file.fastq> | echo $((`wc -l`/4)) )
PYRA2001	71,922,893	
PYRA2002	69,541,881
PYRA2003	71,440,895
PYRA2004	77,021,442
PYRA2005	74,483,793
PYRA2006	99,759,679
PYRA2008	56,364,187

For individual files:
grep -A3 '^@NB501656.*<i5Barcode_ReverseCompl>$' <Plate_Name>.fastq | grep -v '^--$' > Individuals/GT1_A01_PYRA1_B2E00100.fastq

#Below is Nate's protocols and instructions for running the pipeline


1-  Sequencing data must be split into individual fastq files using the dual index sequences used for tagging.  This can be accomplished using either the Illumina demultiplexing software OR using the barcode split python script.  

– Illumina demultiplexing:  Populate the “SampleSheet.csv” file with each sampleID and barcode sequence for all samples on the run.
On the standalone server, make sure to load python and perl
	module load python perl
– GTseq_BarcodeSplit_MP.py script:  Produce an input file in the format below and execute the script. Note: Dual index sequences must appear on header line of the raw fastq file or the script won’t run.
– GTseq_BarcodeSplit_MP.py script input file format:

SampleID,PlateID,i7_name,i7_seq,i5_name,i5_seq
S0001,P001,i5-001,ACGTGC,i012,TTGCCA
S0002,… etc

Execute the barcode split script as shown
$ GTseq_BarcodeSplit_MP.py
type the path to input file
Format= /home/user/…
<inputfile.csv>
type the path to the fastq file to split
Format= /home/user/…
<Undetermined_S0_R1_001.fastq>
… Script will run and output as many samples as you have lines in the input file (not including the header line).  The header line is ignored by the script, so include it in all input files.  Note that workflow B instruments will capture the reverse complement of the 5’-3’ index sequence in I2 (P5 – index seq).  Check that each individual file has been captured as expected using a simple line count command.
$ wc -l *fastq
– each sequence read has 4 lines in fastq format.  Samples should return approximately 100,000 reads per individual but there will be a distribution around this number.  This is with a MiSeq run, NovaSeq and NextSeq runs will be higher/
– If everything looks good, move all the individual fastq files into their own directory for genotyping.

2-  Genotype the individual fastq files using GTseq genotyper script
$ GTseq_Genotyper_v3.pl <input_file.csv> <sample.fastq> > sample.genos
– This must be run for each individual sample.  To make it easier to execute, set up a shell script to process all the samples using a “one-liner” command.
$ ls *fastq | sed ‘s/.*/GTseq_Genotyper_v3.pl  <path to input file> & > &/’ | sed ‘s/fastq$/genos/’ > genotyper.sh
$ sh genotyper.sh
– once finished, you should have one .genos file for every .fastq file in the directory.

3-  At this point, all the samples have been genotyped.  You may wish to compile them into a single file though.  To output a .csv with all the genotype results, you can use the GTseq_GenoCompile_v3.pl script.
$ GTseq_GenoCompile_v3.pl 
– This will output every captured genotype at each locus.
If you wish to suppress output or output in different formats, there are options for that using this script.
$ GTseq_GenoCompile_v3.pl C 90   # this command will output read count for each locus but will only report for samples with call rates at or above 90%.  
– Output types:  S = SNP; C = counts; N = numeric genotypes; A = allele counts
– Genotype capture percentage is a second argument you can use to filter data.  It will only report no-calls for any sample with call-rates below the set threshold.

3-  You may want to check the quality of the data or the overall performance of the run.  For this, I’ve written a python script to summarize the data for a given library.  This script uses the .genos files that were output by the GTseq_Genotyper_v3.pl script to produce summary figures for the run.  The output is a series of .png image files of the summary figures.  These may be compiled into a pdf using imagemagick’s convert command.
$ GTseq_SummaryFigures_v3.pl 
type the path to directory containing .genos files for library
./
type the library name
LIB001
## the script will take a little while to run ##
Once finished, use the convert command to produce a summary pdf for the run.
$ convert *png LIB001.pdf
